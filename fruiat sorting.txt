
#include <LiquidCrystal.h>

const int rs = A0, en = A1, d4 = A2, d5 = A3, d6 = A4, d7 = A5;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);


const int trigPin1 = 7;
const int echoPin1 = 6;


long duration1;
int distance1;

 
HX711 scale(DOUT, CLK);
 
//Change this calibration factor as per your load cell once it is found you many need to vary it in thousands
float calibration_factor = -96650; //-106600 worked for my 40Kg max scale setup 

int obstaclePin = 9;  // This is our input pin
int hasObstacle = HIGH;  // HIGH MEANS NO OBSTACLE


int obstaclePin1 = 8;  // This is our input pin
int hasObstacle1 = HIGH;

int m1= 10;
int m2= 11;


int led =13;

 
void setup() {

pinMode(led,13);

   
  Serial.begin(9600);
  Serial.println("HX711 Calibration");
  Serial.println("Remove all weight from scale");
  Serial.println("After readings begin, place known weight on scale");
  Serial.println("Press a,s,d,f to increase calibration factor by 10,100,1000,10000 respectively");
  Serial.println("Press z,x,c,v to decrease calibration factor by 10,100,1000,10000 respectively");
  Serial.println("Press t for tare");
  scale.set_scale();
  scale.tare(); //Reset the scale to 0
 
  long zero_factor = 50402; //Get a baseline reading
  Serial.print("Zero factor: "); //This can be used to remove the need to tare the scale. Useful in permanent scale projects.
  Serial.println(zero_factor);

pinMode(m1,OUTPUT);

pinMode(m2,OUTPUT);

  pinMode(obstaclePin, INPUT);
  pinMode(obstaclePin1, INPUT);
  
  Serial.begin(9600);
pinMode(trigPin1, OUTPUT); // Sets the trigPin as an Output
pinMode(echoPin1, INPUT);
lcd.begin(16,2);
lcd.setCursor(0,0);
lcd.print("Vegetable Sorting");
lcd.clear();
lcd.setCursor(0,1);
lcd.print("using MATLAB    ");
delay(5000);
lcd.clear();
  
}
 
void load() {
 
  scale.set_scale(calibration_factor); //Adjust to this calibration factor
 
  Serial.print("Reading: ");
 a=scale.get_units();
 a=a/4*-1;
a=a-0.040;
a=a*1000;
  Serial.print(a, 3);
  Serial.print(" grams"); //Change this to kg and re-adjust the calibration factor if you follow SI units like a sane person
  Serial.print(" calibration_factor: ");
  Serial.print(calibration_factor);
  Serial.println();

}


void loop(){

hasObstacle1 = digitalRead(obstaclePin1); //Reads the output of the obstacle sensor from the 7th PIN of the Digital section of the arduino
if (hasObstacle1 == LOW)
{
  digitalWrite(m1,LOW);
   delay(300);
   lcd.setCursor(0,1);
lcd.print("Checking Color.........    ");

  Serial.println("MATLAB");
 
while(Serial.available()==0)
{
  
}

while(Serial.available()==0)
{
  
}
recValue=Serial.read();
Serial.println(recValue);
lcd.clear();
lcd.setCursor(0,1);
lcd.print(recValue);
delay(1000);
lcd.clear();

/*
if(Serial.available()>0)
  {
    recValue=Serial.read();
  Serial.println(recValue);
  }
  
if(Serial.available()>0)
  {
    recValue=Serial.read();
  Serial.println(recValue);
  }*/
if(recValue==100)
{
  f=1;
  Serial.println("REd");
  digitalWrite(led,HIGH);
  lcd.setCursor(0,1);
lcd.print("Red Detected");

}
else if (recValue ==101)
{
  f=0;
    digitalWrite(led,LOW);
}
digitalWrite(m1,HIGH);
  delay(500);
}

hasObstacle = digitalRead(obstaclePin); //Reads the output of the obstacle sensor from the 7th PIN of the Digital section of the arduino
digitalWrite(m1,HIGH);

  if (hasObstacle == LOW) //LOW means something is ahead, so illuminates the 13th Port connected LED
  {
    delay(50);
    digitalWrite(m1,LOW);

lcd.setCursor(0,1);
lcd.print("Checking Weught......");
    delay(500);
lcd.setCursor(0,1);
lcd.print("Checking HIEGHt......");
    
    delay(2000);   
    lcd.clear();
  load();
  
  lcd.setCursor(0,0);
  lcd.print("Weight is ");
  lcd.setCursor(0,1);
  lcd.print(a);
  delay(1000);
  if(a > 25)
  {
    lcd.setCursor(0,1);
lcd.print("Weight ok    ");

    Serial.println("weight ok");
    w=1;
  }
  else
  {
    w=0;
  }
  delay(1000);

  lcd.clear();
  
  
  
  digitalWrite(trigPin1, LOW);
delayMicroseconds(2);
digitalWrite(trigPin1, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin1, LOW);
duration1 = pulseIn(echoPin1, HIGH);
distance1= duration1*0.034/2;
Serial.print("Distance1: ");
Serial.println(distance1);
delay(1000);
  lcd.setCursor(0,0);
  lcd.print("hieght is ");
  lcd.setCursor(0,1);
  lcd.print(distance1);
  
  
  digitalWrite(m1,HIGH);
digitalWrite(m2,LOW); 

digitalWrite(m1,HIGH);
  delay(1500);

digitalWrite(m1,LOW);

 if( w==1 && f==1)
 {
  Serial.println("ok");
  lcd.setCursor(0,0);
  lcd.print("FRUIT OK");
   digitalWrite(m1,HIGH);
 }
 else
 {
    lcd.setCursor(0,0);
  lcd.print("FRUIT  NOT OK");
  Serial.println(" not ok");
digitalWrite(m2,HIGH);
delay(1500);
digitalWrite(m2,LOW);
 }


  
}

}
//=============================================================================================